#include <stdio.h>

// Function to calculate the greatest common divisor (GCD) using the extended Euclidean algorithm
int extendedGCD(int a, int b, int *x, int *y) {
    if (b == 0) {
        *x = 1;
        *y = 0;
        return a;
    }

    int x1, y1;
    int gcd = extendedGCD(b, a % b, &x1, &y1);

    *x = y1;
    *y = x1 - (a / b) * y1;

    return gcd;
}

// Function to calculate the modular multiplicative inverse using the extended Euclidean algorithm
int modInverse(int a, int m) {
    int x, y;
    int gcd = extendedGCD(a, m, &x, &y);

    if (gcd != 1) {
        // Modular inverse doesn't exist
        return -1;
    }

    // Ensure the result is positive
    return (x % m + m) % m;
}

int main() {
    // Given public key
    int e = 31;
    int n = 3599;

    // Find p and q through trial-and-error
    int p, q;
    for (p = 2; p < n; ++p) {
        if (n % p == 0) {
            q = n / p;
            break;
        }
    }

    // Calculate Euler's totient function
    int phi_n = (p - 1) * (q - 1);

    // Calculate the modular multiplicative inverse of e modulo phi_n
    int d = modInverse(e, phi_n);

    // Display the private key
    printf("Private Key (d): %d\n", d);

    return 0;
}
