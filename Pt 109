#include <stdio.h>
#include <string.h>

#define SIZE 5

void generateKeyTable(char key[], char keyTable[][SIZE]) {
    int k, i, j;
    int keyMap[26] = {0};

    for (k = 0; k < strlen(key); k++) {
        keyMap[key[k] - 'A'] = 1;
    }

    k = 0;
    i = 0;
    j = 0;
    while (i < SIZE) {
        while (j < SIZE) {
            if (k < strlen(key)) {
                if (keyMap[key[k] - 'A'] == 1) {
                    keyTable[i][j++] = key[k++];
                    keyMap[key[k - 1] - 'A'] = 2; // Mark as used
                } else {
                    j++;
                }
            } else {
                while (keyMap[i] == 2) {
                    i++;
                }
                keyTable[i][j++] = (char)('A' + i++);
            }
        }
        j = 0;
        i++;
    }
}

void decryptPlayfair(char cipher[], char keyTable[][SIZE], char decrypted[]) {
    int i, j;
    int len = strlen(cipher);
    char a, b;
    int row1, col1, row2, col2;

    for (int k = 0; k < len; k += 2) {
        a = cipher[k];
        b = cipher[k + 1];

        for (i = 0; i < SIZE; i++) {
            for (j = 0; j < SIZE; j++) {
                if (keyTable[i][j] == a) {
                    row1 = i;
                    col1 = j;
                }
                if (keyTable[i][j] == b) {
                    row2 = i;
                    col2 = j;
                }
            }
        }

        if (row1 == row2) {
            // Same row, shift columns to the left (wrap around if necessary)
            decrypted[k] = keyTable[row1][(col1 + SIZE - 1) % SIZE];
            decrypted[k + 1] = keyTable[row2][(col2 + SIZE - 1) % SIZE];
        } else if (col1 == col2) {
            // Same column, shift rows up (wrap around if necessary)
            decrypted[k] = keyTable[(row1 + SIZE - 1) % SIZE][col1];
            decrypted[k + 1] = keyTable[(row2 + SIZE - 1) % SIZE][col2];
        } else {
            // Form a rectangle, replace with opposite corners
            decrypted[k] = keyTable[row1][col2];
            decrypted[k + 1] = keyTable[row2][col1];
        }
    }

    decrypted[len] = '\0'; // Null-terminate the string
}

int main() {
    char key[] = "PT109";
    char cipher[] = "KXJEYUREBEZWEHEWRYTUHEYFSKREHEGOYFIWTTTUOLKSYCAJPOBOTEIZONTXBYBNTGONEYCUZWRGDSONSXBOUYWRHEBAAHYUSEDQ";
    char keyTable[SIZE][SIZE];
    char decrypted[100]; // Adjust the size based on your needs

    generateKeyTable(key, keyTable);

    decryptPlayfair(cipher, keyTable, decrypted);

    // Display the results
    printf("Playfair Decryption:\n");
    printf("Cipher: %s\n", cipher);
    printf("Decrypted: %s\n", decrypted);

    return 0;
}
